// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

// All imports taken from OpenZeppelin Wizard (see "https://wizard.openzeppelin.com/#erc721")

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

// As mentioned in the presentation there were differnt ERC to chose from. In the end we decided to go
// with the ERC-721 to allow for some identification of the tickets. The ERC-1155 would offer more
// flexibility for ticket creation and for ticket transfer, so it might be the more reasonable choice.

contract Ticketing is ERC721, ERC721Burnable, Ownable {
    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter; // taken from the OppenZeppelin Wizard

    address public immutable vendor;
    address public immutable goodCause;
    address public reseller;
    address public buyer;
    uint public availableTickets;
    uint public ticketPrice;
    uint public maxTicketsPerCustomer;
    string public title;
    bool public requestTicket;
    uint public endTime;
    uint payment;
    uint public price;
    uint public totalDonations;
    uint public requestedNumberOfTickets;


    mapping (address => uint) public ticketsOfCustomer;
    mapping (uint => uint) public tokenIdForPrice;
    mapping (address => uint) internal pendingPayment;

    event ticketSold(address _buyer);

    // Create the Event

    constructor(address _vendor, address _goodCause, uint _durationDays, string memory _title, uint _availableTickets,
        uint _ticketPrice, uint _maxTicketsPerCustomer) ERC721("Ticketing", "TKT") {

        vendor = _vendor;
        goodCause = _goodCause;
        title = _title;
        availableTickets = _availableTickets;
        ticketPrice = _ticketPrice;
        maxTicketsPerCustomer = _maxTicketsPerCustomer;
        endTime = block.timestamp + _durationDays * 1 days;

    }

    // function _baseURI was given by the OpenZeppelin Wizard

    function _baseURI() internal pure override returns (string memory) {
        return "https://bafybeiajptvyr3nnvpjvnuw6qe5so7ifjvbcfdsvhfkfuevex7caqv5wiu{id}.json";
    }

    // Customer has to mint an pay ticket within this function

     function getOneTicket(address to) public payable {

        require(msg.value == ticketPrice, "Send the correct amount of ETH");
        require(availableTickets > 0, "Not enough tickets available");
        require(ticketsOfCustomer[msg.sender] < maxTicketsPerCustomer, "You already bought the maximum amount of tickets");
        require(block.timestamp < endTime, "Sale already ended");

        uint256 tokenId = _tokenIdCounter.current();    // taken from OpenZeppelin Wizard
        _tokenIdCounter.increment();                    // taken from OpenZeppelin Wizard
        _safeMint(to, tokenId);                         // taken from OpenZeppelin Wizard

        //change internal variables
        ticketsOfCustomer[msg.sender] += 1;
        availableTickets -= 1;

        //allow payment to vendor
        payable(vendor).transfer(msg.value);

        emit ticketSold(msg.sender);
    }

    // The functions for reselling Tickets was taken from "https://stackoverflow.com/questions/67317392/how-to-transfer-a-nft-from-one-account-to-another-using-erc721"
    // We altered the last function so that 10% of the resale price will be directly transferred 
    // to the wallet of the GoodCause specified.

    // Resell functions:

    event ticketResold (address _reseller, address _buyer, uint _price);
    event donatedToGoodCause (address _buyer, address _goodCause, uint _amount);
    event listedForSale (address _reseller, uint _price, uint _tokenId);
    event notForSaleAnymore (address _reseller, uint _tokenId);

    // First a previous buyer has to allow the ticket to be bought and set the price

    function allowBuy(uint _tokenId, uint _price) external {

        require(msg.sender == ownerOf(_tokenId), "You are not owner of this exact ticket");
        require(_price > 0, "Price cannot be 0");
        tokenIdForPrice[_tokenId] = _price;

        emit listedForSale(msg.sender, _price, _tokenId);
    }

    // Buyer can decide that the ticket can now NOT be bought anymore

    function disallowBuy(uint _tokenId) external {

        require(msg.sender == ownerOf(_tokenId), "You are not owner of this exact ticket");
        tokenIdForPrice[_tokenId] = 0;

        emit notForSaleAnymore(msg.sender, _tokenId);
    }

    // Create a buy function for a buyer that wants to buy a listed ticket

    function buy(uint _tokenId) external payable {

        price = tokenIdForPrice[_tokenId];
        require(price > 0, "This ticket is not for sale");
        require(msg.value == price, "Please send correct price");

        reseller = ownerOf(_tokenId);
        _transfer(reseller, msg.sender, _tokenId);
        tokenIdForPrice[_tokenId] = 0; // Ticket is not for sale anymore
        payable(reseller).transfer(90 * msg.value / 100);
        payable(goodCause).transfer(10 * msg.value / 100);

        emit ticketResold(reseller, msg.sender, 90 * msg.value / 100);
        emit donatedToGoodCause(msg.sender, goodCause, 10 * msg.value / 100);

        totalDonations += (10 * msg.value / 100);
    }   

}


